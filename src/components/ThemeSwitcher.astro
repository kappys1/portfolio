---
export interface Props {
  className?: string;
}
const { className = '' } = Astro.props;
---

<button
	id='theme-toggle'
	type='button'
	aria-label='theme toggle'
	class={`text-gray-500 hover:text-primary-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-lg text-sm p-1 ${className}`}
>
	<svg
		id='theme-toggle-dark-icon'
		class='hidden w-5 h-5'
		fill='currentColor'
		viewBox='0 0 20 20'
		xmlns='http://www.w3.org/2000/svg'
	><path d='M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z'
		></path></svg
	>
	<svg
		id='theme-toggle-light-icon'
		class='hidden w-5 h-5'
		fill='currentColor'
		viewBox='0 0 20 20'
		xmlns='http://www.w3.org/2000/svg'
	><path
			d='M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z'
			fill-rule='evenodd'
			clip-rule='evenodd'></path></svg
	>
</button>

<script>
	document.addEventListener('astro:after-swap', () => {
  	localStorage.theme === 'dark'
  		? document.documentElement.classList.add('dark')
  		: document.documentElement.classList.add('light');
  });
</script>
<script is:inline>
	document.addEventListener('astro:page-load', () => {
		const themeToggleDarkIcon = document.getElementById(
			'theme-toggle-dark-icon'
		);
		const themeToggleLightIcon = document.getElementById(
			'theme-toggle-light-icon'
		);
		const themeToggleBtn = document.getElementById('theme-toggle');
		const theme = (() => {
			if (
				typeof localStorage !== 'undefined' &&
				localStorage.getItem('theme')
			) {
				return localStorage.getItem('theme');
			}
			if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			return 'light';
		})();

		if (theme === 'light') {
			themeToggleDarkIcon.classList.remove('hidden');
			document.documentElement.classList.remove('dark');
		} else {
			themeToggleLightIcon.classList.remove('hidden');
			document.documentElement.classList.add('dark');
		}

		window.localStorage.setItem('theme', theme);

		const handleToggleClick = () => {
			const element = document.documentElement;
			element.classList.toggle('dark');
			themeToggleDarkIcon.classList.toggle('hidden');
			themeToggleLightIcon.classList.toggle('hidden');

		const isDark = element.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		};

		themeToggleBtn.addEventListener('click', handleToggleClick);
	});
</script>
